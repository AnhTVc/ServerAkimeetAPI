package com.project.DAO.sql;

import org.apache.commons.dbcp2.BasicDataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.project.util.ConstantConfigurationManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by knight_cs on 04/08/2016.
 *
 * This Class use for use only read on the system.
 */
public class PoolManagerWrite {

    private static final Logger logger = LoggerFactory.getLogger(PoolManagerWrite.class);
    private static final BasicDataSource poolConnnect = new BasicDataSource();

    static  {
        poolConnnect.setDriverClassName("com.mysql.jdbc.Driver");
        poolConnnect.setUrl(ConstantConfigurationManager.URL_SEVER);
        poolConnnect.setUsername(ConstantConfigurationManager.USER_SEVER);
        poolConnnect.setPassword(ConstantConfigurationManager.PASS_SEVER);
        poolConnnect.setDefaultReadOnly(true); // for methods not interactive to database
        poolConnnect.setMaxWaitMillis(20000); // max time wait query from database
        poolConnnect.setMaxConnLifetimeMillis(25000); //vong doi song cua mot connect
        poolConnnect.setMaxTotal(2);
        poolConnnect.setMaxIdle(2);
    }



    public  static synchronized Connection getConnection() throws SQLException {
        return poolConnnect.getConnection();
    }

    public static  void closePool(){
        try {
            poolConnnect.close();
        } catch (SQLException e) {
            e.printStackTrace();
            logger.error("Can not CLOSE poolRead !");
        }
    }



    public void Ex() throws SQLException {
        // Creates a BasicDataSource
        BasicDataSource poolConnnect = new BasicDataSource();


        // onnection (session) with a specific database. SQL statements are
        // executed and results are returned within the context of a connection.
        Connection conn = null;

        // An object that represents a precompiled SQL statement.
        PreparedStatement stmt = null;
        try {
            conn = poolConnnect.getConnection();
            stmt = conn.prepareStatement("select * from company");

            // A table of data representing a database result set, which is
            // usually generated by executing a statement that queries the
            // database.
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                System.out.println("Comapny: " + rs.getString("company"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close Statement and Connection
            if (stmt != null) {
                stmt.close();
            }
            if (conn != null) {
                conn.close();
            }
        }
    }
}
